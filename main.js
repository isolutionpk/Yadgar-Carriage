// only add update server if it's not being run from cliif (require.main !== module) {    require('update-electron-app')({        repo: 'isolutionpk/Yadgar-Carriage',        updateInterval: '5 minutes',        logger: require('electron-log')    })}// Modules to control application life and create native browser windowconst {app, autoUpdater, dialog, BrowserWindow} = require('electron')const path                                      = require('path')// const version                                   = require('package').versionif (require('electron-squirrel-startup')) return;process.env.ELECTRON_API_DEMO_GITHUB_TOKEN     = '0416316b9c59b2e7cddb4669328deccf6d90af76';process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = '1';const debug                                    = /--debug/.test(process.argv[2])if (process.mas) app.setName('Yadgar Carriage')makeSingleInstance()// Keep a global reference of the window object, if you don't, the window will// be closed automatically when the JavaScript object is garbage collected.let mainWindowfunction createWindow() {    // Create the browser window.    mainWindow = new BrowserWindow({        width: 800,        height: 600,        title: app.getName() + ' V' + app.getVersion(),        icon: path.join(__dirname, 'assets/app-icon/mac/app.icns'),        webPreferences: {            nodeIntegration: true        }    })    // and load the index.html of the app.    mainWindow.loadFile('index.html')    // Launch fullscreen with DevTools open, usage: npm run debug    // if (debug) {        mainWindow.webContents.openDevTools()        mainWindow.maximize()    // }    // Emitted when the window is closed.    mainWindow.on('closed', function () {        // Dereference the window object, usually you would store windows        // in an array if your app supports multi windows, this is the time        // when you should delete the corresponding element.        mainWindow = null    })    // showDialogBoxesForTesting(process.platform)    // testing()}// This method will be called when Electron has finished// initialization and is ready to create browser windows.// Some APIs can only be used after this event occurs.app.on('ready', createWindow)// Quit when all windows are closed.app.on('window-all-closed', function () {    // On macOS it is common for applications and their menu bar    // to stay active until the user quits explicitly with Cmd + Q    if (process.platform !== 'darwin') {        app.quit()    }})app.on('activate', function () {    // On macOS it's common to re-create a window in the app when the    // dock icon is clicked and there are no other windows open.    if (mainWindow === null) {        createWindow()    }})//const server = 'https://github.com/isolutionpk/Yadgar-Carriage'// const feed = `${server}/update/${process.platform}/${app.getVersion()}`// Make this app a single instance app.//// The main window will be restored and focused instead of a second window// opened when a person attempts to launch a second instance.//// Returns true if the current version of the app should quit instead of// launching.function makeSingleInstance() {    if (process.mas) return    app.requestSingleInstanceLock()    app.on('second-instance', () => {        if (mainWindow) {            if (mainWindow.isMinimized()) mainWindow.restore()            mainWindow.focus()        }    })}//todo: Not in usedfunction sendStatusToWindow(text) {    // let title = mainWindow.getTitle();    mainWindow.setTitle(text);}//todo: Not in usedfunction testing() {    // if (process.platform === 'win32' || process.platform === 'win64') {    sendStatusToWindow("Running " + process.platform);    const server = 'https://api.github.com/repos/isolutionpk/Yadgar-Carriage/releases/latest'    // const server = 'isolutionpk/Yadgar-Carriage/releases'    autoUpdater.setFeedURL({url: server})    setInterval(() => {        autoUpdater.checkForUpdates()    }, 2000)    autoUpdater.on('checking-for-update', () => {        sendStatusToWindow('Checking for update...');    });    autoUpdater.on('update-available', () => {        sendStatusToWindow('update available...');    })    autoUpdater.on('update-not-available', (ev, info) => {        sendStatusToWindow('Update not available.');    });    autoUpdater.on('error', (ev, err) => {        sendStatusToWindow('Error in auto-updater.:' + err);        process.stdout.write(ev, err);    });    autoUpdater.on('download-progress', (progressObj) => {        let log_message = "Download speed: " + progressObj.bytesPerSecond;        log_message     = log_message + ' - Downloaded ' + progressObj.percent + '%';        log_message     = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';        sendStatusToWindow(log_message);    });    autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {        sendStatusToWindow('Update downloaded; will install in 5 seconds');        console.log('A new version has been downloaded. Restart the application to apply the updates.');        const dialogOpts = {            type: 'info',            buttons: ['Restart', 'Later'],            title: 'Application Update',            message: process.platform === 'win32' ? releaseNotes : releaseName,            detail: 'A new version has been downloaded. Restart the application to apply the updates.'        }        dialog.showMessageBox(dialogOpts, (response) => {            if (response === 0) autoUpdater.quitAndInstall()        })    })    // autoUpdater.on('error', message => {    //     showDialogBoxesForTesting('There was a problem updating the application');    //     console.log('There was a problem updating the application')    //     console.log(message)    // })    // }}// In this file you can include the rest of your app's specific main process// code. You can also put them in separate files and require them here.// this should be placed at top of main.js to handle setup events quicklyif (handleSquirrelEvent()) {    // squirrel event handled and app will exit in 1000ms, so don't do anything else    return;}function handleSquirrelEvent() {    if (process.argv.length === 1) {        return false;    }    const ChildProcess = require('child_process');    const path         = require('path');    const appFolder      = path.resolve(process.execPath, '..');    const rootAtomFolder = path.resolve(appFolder, '..');    const updateDotExe   = path.resolve(path.join(rootAtomFolder, 'Update.exe'));    const exeName        = path.basename(process.execPath);    const spawn = function (command, args) {        let spawnedProcess, error;        try {            spawnedProcess = ChildProcess.spawn(command, args, {detached: true});        } catch (error) {        }        return spawnedProcess;    };    const spawnUpdate = function (args) {        return spawn(updateDotExe, args);    };    const squirrelEvent = process.argv[1];    switch (squirrelEvent) {        case '--squirrel-install':        case '--squirrel-updated':            // Optionally do things such as:            // - Add your .exe to the PATH            // - Write to the registry for things like file associations and            //   explorer context menus            // Install desktop and start menu shortcuts            spawnUpdate(['--createShortcut', exeName]);            setTimeout(app.quit, 1000);            return true;        case '--squirrel-uninstall':            // Undo anything you did in the --squirrel-install and            // --squirrel-updated handlers            // Remove desktop and start menu shortcuts            spawnUpdate(['--removeShortcut', exeName]);            setTimeout(app.quit, 1000);            return true;        case '--squirrel-obsolete':            // This is called on the outgoing version of your app before            // we update to the new version - it's the opposite of            // --squirrel-updated            app.quit();            return true;    }}//todo: Not in usedfunction showDialogBoxesForTesting($message) {    const dialogOpts = {        type: 'info',        buttons: ['Restart', 'Later'],        title: 'Application Update',        message: $message,        detail: 'A new version has been downloaded. Restart the application to apply the updates.'    }    dialog.showMessageBox(dialogOpts, (response) => {        // if (response === 0) autoUpdater.quitAndInstall()    })}